import 'package:dio/dio.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../model/cart_item.dart';

class CartService {
  final Dio _dio = Dio();
  final String baseUrl = "https://fitting-solely-fawn.ngrok-free.app/api/ShoppingCart";

  Future<String?> _getToken() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('token');
  }

  /// üõí **L·∫•y gi·ªè h√†ng**
  Future<List<CartItem>> getCart() async {
  try {
    String? token = await _getToken();
    if (token == null) throw Exception("Ch∆∞a ƒëƒÉng nh·∫≠p");

    Response response = await _dio.get(
      "$baseUrl/GetCart",
      options: Options(headers: {"Authorization": "Bearer $token"}),
    );

    print("üîç API response: ${response.data}"); // Debug API response

    if (response.data is Map<String, dynamic> && response.data.containsKey('items')) {
      return (response.data['items'] as List)
          .map((item) => CartItem.fromJson(item))
          .toList();
    } else {
      throw Exception("D·ªØ li·ªáu gi·ªè h√†ng kh√¥ng h·ª£p l·ªá!");
    }
  } catch (e) {
    print("‚ùå L·ªói l·∫•y gi·ªè h√†ng: $e");
    return [];
  }
}




  /// ‚ûï **Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng**
  Future<void> addToCart(CartItem item) async {
    try {
      String? token = await _getToken();
      if (token == null) throw Exception("Ch∆∞a ƒëƒÉng nh·∫≠p");

      await _dio.post(
        "$baseUrl/AddToCart",
        data: item.toJson(),
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );
    } catch (e) {
      print("‚ùå L·ªói th√™m v√†o gi·ªè h√†ng: $e");
    }
  }

  /// ‚ùå **X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng**
  Future<void> removeFromCart(String productId) async {
    try {
      String? token = await _getToken();
      if (token == null) throw Exception("Ch∆∞a ƒëƒÉng nh·∫≠p");

      await _dio.delete(
        "$baseUrl/RemoveFromCart/$productId",
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );
    } catch (e) {
      print("‚ùå L·ªói x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng: $e");
    }
  }

  /// üîÑ **C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m**
  Future<void> updateCartItem(CartItem item) async {
    try {
      String? token = await _getToken();
      if (token == null) throw Exception("Ch∆∞a ƒëƒÉng nh·∫≠p");

      await _dio.put(
        "$baseUrl/UpdateCartItem",
        data: item.toJson(),
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );
    } catch (e) {
      print("‚ùå L·ªói c·∫≠p nh·∫≠t gi·ªè h√†ng: $e");
    }
  }

  /// üóë **X√≥a to√†n b·ªô gi·ªè h√†ng**
  Future<void> clearCart() async {
    try {
      String? token = await _getToken();
      if (token == null) throw Exception("Ch∆∞a ƒëƒÉng nh·∫≠p");

      await _dio.delete(
        "$baseUrl/ClearCart",
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );
    } catch (e) {
      print("‚ùå L·ªói x√≥a gi·ªè h√†ng: $e");
    }
  }

  /// ‚úÖ **Thanh to√°n gi·ªè h√†ng**
  Future<void> checkout() async {
    try {
      String? token = await _getToken();
      if (token == null) throw Exception("Ch∆∞a ƒëƒÉng nh·∫≠p");

      await _dio.post(
        "$baseUrl/Checkout",
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );
    } catch (e) {
      print("‚ùå L·ªói thanh to√°n: $e");
    }
  }
}
