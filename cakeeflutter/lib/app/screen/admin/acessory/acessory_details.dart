import 'package:flutter/material.dart';
import 'package:cakeeflutter/app/model/acessory.dart';
import '../../../core/api_service.dart';

class AcessoryDetailScreen extends StatefulWidget {
  final String acessoryId;

  AcessoryDetailScreen({required this.acessoryId});

  @override
  _AcessoryDetailScreenState createState() => _AcessoryDetailScreenState();
}

class _AcessoryDetailScreenState extends State<AcessoryDetailScreen> {
  Acessory? _acessory;
  bool _isLoading = true;
  TextEditingController _acessoryNameController = TextEditingController();
  TextEditingController _acessoryPriceController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _acessoryNameController = TextEditingController(); // Kh·ªüi t·∫°o controller
    _acessoryPriceController = TextEditingController(); // Kh·ªüi t·∫°o controller
    _fetchAcessory(); // G·ªçi _fetchAcessory khi kh·ªüi t·∫°o
  }

  Future<void> _fetchAcessory() async {
    try {
      print("üìå G·ªçi API l·∫•y ph·ª• ki·ªán v·ªõi acessoryId: ${widget.acessoryId}");

      var acessory = await APIRepository().getAcessoryById(widget.acessoryId);

      if (acessory != null) {
        print("üìå Acessory nh·∫≠n t·ª´ API: ${acessory.acessoryName}");
        setState(() {
          _acessory = acessory; // C·∫≠p nh·∫≠t tr·∫°ng th√°i _acessory
          _acessoryNameController.text = acessory.acessoryName.toString() ?? "Kh√¥ng c√≥ t√™n";
          _acessoryPriceController.text = acessory.acessoryPrice.toString(); // Hi·ªÉn th·ªã gi√° tr·ªã s·ªë nguy√™n
          _isLoading = false; // C·∫≠p nh·∫≠t tr·∫°ng th√°i _isLoading
        });
      } else {
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph·ª• ki·ªán!");
        setState(() {
          _acessory = null; // C·∫≠p nh·∫≠t tr·∫°ng th√°i _acessory
          _acessoryNameController.text = "Kh√¥ng t√¨m th·∫•y";
          _isLoading = false; // C·∫≠p nh·∫≠t tr·∫°ng th√°i _isLoading
        });
      }
    } catch (error) {
      print("‚ùå L·ªói khi l·∫•y ph·ª• ki·ªán: $error");
      setState(() {
        _isLoading = false; // C·∫≠p nh·∫≠t tr·∫°ng th√°i _isLoading
      });
    }
  }

  void _updateAcessory() async {
    if (_acessory == null) return;

    setState(() {
      _isLoading = true;
    });

    bool success = await APIRepository().updateAcessory(
  widget.acessoryId,
  {
    "acessoryName": _acessoryNameController.text,
    "acessoryPrice": double.tryParse(_acessoryPriceController.text) ?? 0.0,
  },
);


    setState(() {
      _isLoading = false;
    });

    if (success) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng")),
      );

      Navigator.pop(context, true);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i")),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Chi Ti·∫øt Ph·ª• Ki·ªán')),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : _acessory == null
              ? Center(child: Text("Kh√¥ng t√¨m th·∫•y ph·ª• ki·ªán"))
              : Padding(
                  padding: EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        "T√™n ph·ª• ki·ªán:",
                        style: TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                      SizedBox(height: 8),
                      TextField(
                        controller: _acessoryNameController,
                        decoration: InputDecoration(
                          border: OutlineInputBorder(),
                          hintText: "Nh·∫≠p t√™n ph·ª• ki·ªán",
                        ),
                      ),
                      SizedBox(height: 16),
                      Text(
                        "Gi√° ph·ª• ki·ªán:",
                        style: TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                      SizedBox(height: 8),
                      TextField(
                        controller: _acessoryPriceController,
                        decoration: InputDecoration(
                          border: OutlineInputBorder(),
                          hintText: "Nh·∫≠p gi√° ph·ª• ki·ªán",
                        ),
                        keyboardType: TextInputType.number, // ƒê·∫∑t b√†n ph√≠m s·ªë
                      ),
                      SizedBox(height: 16),
                      ElevatedButton(
                        onPressed: _updateAcessory,
                        child: Text("C·∫≠p nh·∫≠t"),
                      ),
                    ],
                  ),
                ),
    );
  }
}
