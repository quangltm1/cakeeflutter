import 'package:cakeeflutter/app/core/cart.service.dart';
import 'package:flutter/material.dart';
import '../model/cart.dart';
import '../model/cart_item.dart';

class CartProvider extends ChangeNotifier {
  final CartService _cartService = CartService();
  Cart? _cart;
  bool _isLoading = false;
  bool _isProcessing = false;
  Map<String, bool> _isUpdating = {}; // Tr·∫°ng th√°i c·∫≠p nh·∫≠t t·ª´ng s·∫£n ph·∫©m

  Cart? get cart => _cart;
  bool get isLoading => _isLoading;
  bool get isProcessing => _isProcessing;
  Map<String, bool> get isUpdating => _isUpdating;
  int get totalItems => _cart?.items.length ?? 0;
  double get totalPrice {
  if (_cart == null || _cart!.items.isEmpty) return 0; // ‚úÖ Ki·ªÉm tra null tr∆∞·ªõc khi t√≠nh t·ªïng
  return _cart!.items.fold(0, (sum, item) => sum + (item.total ?? 0));
}
 // ‚úÖ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn gi·ªè h√†ng

  /// üõí **L·∫•y gi·ªè h√†ng t·ª´ API**
  Future<void> fetchCart() async {
    try {
      _isLoading = true;
      notifyListeners();

      _cart = await _cartService.getCart();
      if (_cart != null) {
        _cart!.totalPrice = _cart!.items.fold(0, (sum, item) => sum + item.total); // ‚úÖ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn khi t·∫£i gi·ªè h√†ng
      }

      print("‚úÖ Gi·ªè h√†ng ƒë√£ t·∫£i: $_cart");
    } catch (e) {
      print("‚ùå L·ªói l·∫•y gi·ªè h√†ng: $e");
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  /// ‚ûï **Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng**
  Future<bool> addToCart(CartItem item) async {
  _isProcessing = true;
  notifyListeners();

  bool success = await _cartService.addToCart(item); // G·ªçi API
  if (success) {
    await fetchCart(); // L√†m m·ªõi gi·ªè h√†ng
  }

  _isProcessing = false;
  notifyListeners();
  return success; // ‚úÖ Tr·∫£ v·ªÅ bool ƒë·ªÉ ki·ªÉm tra
}


  /// üîÑ **C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m**
  Future<void> updateQuantity(String productId, int newQuantity) async {
    _isUpdating[productId] = true;
    notifyListeners();

    CartItem? item = _cart?.items.firstWhere(
      (i) => i.productId == productId,
      orElse: () => CartItem(
        productId: productId,
        cakeId: null,
        accessoryId: null,
        quantityCake: 0,
        quantityAccessory: 0,
        total: 0,
        name: '',
        price: 0,
        imageUrl: '',
      ),
    );

    if (item != null) {
      // ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v√† t√≠nh l·∫°i total cho s·∫£n ph·∫©m
      item = CartItem(
        productId: item.productId,
        cakeId: item.cakeId,
        accessoryId: item.accessoryId,
        quantityCake: newQuantity,
        quantityAccessory: item.quantityAccessory,
        total: item.price * newQuantity + item.price * item.quantityAccessory, // ‚úÖ T√≠nh l·∫°i total ch√≠nh x√°c
        name: item.name,
        price: item.price,
        imageUrl: item.imageUrl,
      );

      bool success = await _cartService.updateCartItem(item);
      if (success) {
        await fetchCart();
      }
    }

    _isUpdating[productId] = false;
    notifyListeners();
  }

  /// ‚ùå **X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng**
  Future<void> removeFromCart(String productId) async {
    _isProcessing = true;
    notifyListeners();

    bool success = await _cartService.removeFromCart(productId);
    if (success) {
      await fetchCart();
    }

    _isProcessing = false;
    notifyListeners();
  }

  /// üóë **X√≥a to√†n b·ªô gi·ªè h√†ng**
  Future<void> clearCart() async {
    _isProcessing = true;
    notifyListeners();

    bool success = await _cartService.clearCart();
    if (success) {
      _cart = null;
    }

    _isProcessing = false;
    notifyListeners();
  }

  /// ‚úÖ **Thanh to√°n gi·ªè h√†ng**
  Future<void> checkout() async {
    _isProcessing = true;
    notifyListeners();

    bool success = await _cartService.checkout();
    if (success) {
      await fetchCart(); // ‚úÖ L√†m m·ªõi gi·ªè h√†ng sau khi thanh to√°n
    }

    _isProcessing = false;
    notifyListeners();
  }
}
